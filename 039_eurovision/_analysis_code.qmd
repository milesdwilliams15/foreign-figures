---
title: "Eurovision"
format: html
---

## Setup

```{r packages + settings}
library(tidyverse)
library(socsci)
library(geomtextpath)
library(ggrepel)
library(coolorrr)
library(here)
set_palette(
  qualitative = c(
    "steelblue",
    "navy",
    "red3",
    "orange3"
  ),
  binary = c("orange3", "navy"),
  sequential = c("skyblue1", "navy"),
  diverging = c("red3", "white", "navy")
)
source(here::here("my_theme.R"))
theme_set(my_theme())
saveit <- function(num = 1, ht = 4, wd = 6) {
  ggsave(
    here(
      "039_eurovision",
      paste0("fig", num, ".png")
    ),
    height = ht,
    width = wd,
    dpi = 500
  )
}
```


## Data

Source: https://github.com/Spijkervet/eurovision-dataset?tab=readme-ov-file

```{r}
read_csv(
  here(
    "_data",
    "eurovision_votes.csv"
  )
) -> dt

summary(dt)
```

These country labels suck. Let's fix them:

```{r}
dt |>
  mutate(
    ccode1 = from_country |>
      str_to_upper() |>
      countrycode::countrycode(
        "iso2c", "cown"
      ),
    ccode2 = to_country |>
      str_to_upper() |>
      countrycode::countrycode(
        "iso2c", "cown"
      )
  ) -> dt
```

Let's add some bilateral and unilateral variables:

```{r}
library(peacesciencer)

create_dyadyears() |>
  add_atop_alliance() |>
  add_igos() |>
  add_gml_mids() |>
  add_cow_trade() |>
  add_contiguity() -> ps

dt |>
  left_join(
    ps
  ) -> dt
```

## Figures

```{r}
#| fig-height: 7
#| fig-width: 6

dt |>
  group_by(
    year, round, ccode2
  ) |>
  summarize(
    points = sum(total_points),
    .groups = "drop"
  ) |>
  group_by(year, round) |>
  mutate(
    winner = ifelse(
      points == max(points),
      1, 0
    )
  ) |>
  mutate(
    country = countrycode::countrycode(
      ccode2, "cown", "country.name"
    )
  ) |>
  drop_na() |>
  filter(round == "final") |>
  group_by(country) |>
  summarize(
    pct = mean(winner),
    tot = sum(winner),
    los = sum(winner == 0),
    .groups = "drop"
  ) |>
  ggplot() +
  aes(y = reorder(country, pct)) +
  geom_pointrange(
    aes(
      x = pct,
      xmin = 0,
      xmax = pct
    ),
    width = .5,
    color = "navy"
  ) +
  geom_vline(
    xintercept = .2,
    linewidth = 20,
    color = "orange3"
  ) +
  geom_text(
    aes(
      x = .185,
      label = paste0(tot , ":", los)
    ),
    family = "mono",
    fontface = "bold",
    color = "navy",
    hjust = 0
  ) +
  labs(
    title = str_wrap(
      "Who does well in Eurovision?",
      width = 37
    ),
    subtitle = str_wrap(
      "Average Eurovision points per country in the final round, 1957-2023",
      width = 55
    ),
    x = NULL,
    y = NULL,
    caption = logo
  ) +
  scale_x_continuous(
    labels = ~ ifelse(
      .x != 0.2,
      paste0(.x * 100, "%"),
      "Wins:Losses"
    ),
    limits = c(0, .22)
  ) +
  theme(
    panel.grid.major.y = element_blank()
  )
saveit(1, 7)
```

```{r}
#| fig-height: 6
#| fig-width: 6

library(sjPlot)
library(mgcv)
mod <- dt |>
  mutate(
    Trade = flow1 + flow2,
    Neighbors = ifelse(conttype > 0, "Neighbors", "Not Neighbors"),
    Conflict = ifelse(
      gmlmidongoing == 1 & 
        (hostlev >= 4),
      "Conflict", "No Conflict"
    ),
    IGOs = replace_na(dyadigos, 0),
    dyad = paste0(ccode1, "-", ccode2) |>
      as.factor() |>
      as.numeric()
  ) |>
  gam(
    total_points ~ 
      log(Trade + 1) + Neighbors + 
      Conflict + log(IGOs + 1) +
      s(year) +
      s(dyad, bs = "re"),
    data = _,
    family = quasipoisson
  ) 

plot_model(
  mod,
  type = "pred",
  terms = "Trade"
) +
  scale_x_log10(
    labels = dollar
  ) +
  labs(
    title = "Trade",
    x = "\nTrade in Millions (log-10)",
    y = NULL
  ) +
  theme(
    plot.title = element_text(hjust = .5)
  ) -> p1

plot_model(
  mod,
  type = "pred",
  terms = "Neighbors"
) +
  labs(
    title = "Neighbors",
    x = NULL,
    y = NULL
  ) +
  theme(
    plot.title = element_text(hjust = .5)
  ) -> p2

plot_model(
  mod,
  type = "pred",
  terms = "IGOs"
) +
  labs(
    title = "IGOs",
    x = "\nNo. of IGOs",
    y = NULL
  ) +
  theme(
    plot.title = element_text(hjust = .5)
  ) -> p3

plot_model(
  mod,
  type = "pred",
  terms = "Conflict"
) +
  labs(
    title = "Conflict",
    x = NULL,
    y = NULL
  ) +
  theme(
    plot.title = element_text(hjust = .5)
  ) -> p4

library(patchwork)
p1 + p2 + p3 + p4 +
  plot_annotation(
    title = str_wrap(
      "Predicted votes from one country to the other",
      width = 37
    ),
    subtitle = str_wrap(
      "Predictions from a Poisson regression"
    ),
    caption = logo
  ) +
  plot_layout(
    widths = c(2, 1)
  )
saveit(2, 6)
```

